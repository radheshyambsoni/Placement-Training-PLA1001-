for(i=0; i*i<n;i++){
    //code
}
i*i=n -> stopping condition
i=sqrt(n)
O(n^(1/2))

for(i=0; i<n;i++){
    //code
}
for(j=0; j<n;j++){
    //code
}
O(n+n)=O(n)

P=0
for(i=1;i<n;i*=2){
	p+=1;
}
log(n) base 2
value of P will change log(n) base 2 times
so it will be P=log(n) base 2

for(j=1;j<P;j*=2){
    //code
}
again this one will run log(P) base 2
so it will be log(log(n) base 2) base 2
so final is O(log(n) base 2) + O(log(log(n) base 2)) base 2 = O(log(n*log(n) base 2) base 2)

Time complexity when conditional statement is present
function(n){
    if(n<5){
        printf(......)
        complexity is O(n) for this part
    }else{
        for(i=0;i<n;i++){
            complexity is O(n) for this loop
        }
    }
}
O(1) or O(n)

a=0
i=n;
do{
    a+=i;
    i/=2'
}while(i>1)
O(log(n) base 2)